{"version":3,"sources":["langMaps/foneng.ts","components/Keyboard/Keyboard.tsx","components/SearchIPADB/SearchIPADB.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["foneng","P","M","V","J","φ","ꚕ","T","N","R","Z","K","Б","Λ","Ч","e","A","Ƨ","Ь","O","Ⴖ","נ","U","B","F","W","X","C","ϴ","D","L","S","Y","G","Э","ә","Γ","I","ვ","E","ς","H","KEY_SIZE","Keyboard","langMap","onPress","langEntries","Object","entries","style","display","width","flexWrap","maxWidth","map","letter","ipa","height","fontSize","margin","onClick","SearchIPADB","search","console","log","phonsByLen","length","foundPhons","word","App","useState","inputCharacters","setInputCharacters","inputText","join","inputIpa","l","className","readOnly","value","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAiEeA,G,MAjEA,CACbC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,UAEHC,SAAG,SAEHC,SAAG,OACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IAEHC,SAAG,SAEHC,SAAG,SAEHC,SAAG,IAEHC,EAAG,SACHC,EAAG,UAEHC,SAAG,eACHC,SAAG,eACHC,EAAG,eAEHC,SAAG,SAEHC,SAAG,eACHC,EAAG,WACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,UACHC,EAAG,SAEHC,SAAG,SACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IAEHC,SAAG,SAEHC,SAAG,eAEHC,SAAG,SACHC,EAAG,eAEHC,SAAG,eACHC,EAAG,UAEHC,SAAG,UAEH,UAAM,eAEN,SAAK,eAEL,SAAK,SACLC,EAAG,Y,OCnDCC,EAAW,GAEJC,EAAW,YAGP,IAFfC,EAEc,EAFdA,QACAC,EACc,EADdA,QAEMC,EAAcC,OAAOC,QAAQJ,GAKnC,OACE,sBACEK,MAAO,CACLC,QAAS,OACTC,MAAO,MACPC,SAAU,OACVC,SAAUX,KALd,UAQGI,EAAYQ,KAAI,mCAAEC,EAAF,KAAUC,EAAV,YACf,wBAEEP,MAAO,CACLQ,OAAQf,EACRS,MAAOT,EACPgB,SAAU,SACVC,OAAQjB,GAEVkB,QAAS,kBAAMf,EAAQ,CAAEU,SAAQC,SARnC,SAUGD,GATIA,MAYT,wBACEN,MAAO,CACLQ,OAAQf,EACRS,MAAOT,GACPiB,OAAQjB,GAEVkB,QAAS,kBAAMf,EAAQ,CAAEU,OAAQ,eANnC,wB,OCtCOM,EAAyB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvCC,QAAQC,IAAIC,EAAWH,EAAOI,SAE9B,IAAMC,EAAuBF,EAAWH,EAAOI,QAAQJ,IAAW,GAClE,OACE,gCACE,6BACGK,EAAWb,KAAI,SAACc,GAAD,OACd,6BAAgBA,GAAPA,QAGZN,EAAOI,SAAWC,EAAWD,OAC5B,kDAEA,iCCmBOG,MAlCf,WAAgB,IAAD,EACiCC,mBAE5C,IAHW,mBACNC,EADM,KACWC,EADX,KAIPC,EAAYF,EAAgBG,KAAK,IACjCC,EAAWJ,EAAgBjB,KAAI,SAACsB,GAAD,OAAO5E,EAAO4E,MAAIF,KAAK,IAC5D,OACE,qBAAKG,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uBAAO5B,MAAO,CAAES,SAAU,UAAYoB,UAAQ,EAACC,MAAON,IACtD,cAAC,EAAD,CACE7B,QAAS5C,EACT6C,QAAS,gBAAGU,EAAH,EAAGA,OAAH,OACPiB,GAAmB,SAACD,GAClB,OAAQhB,GACN,IAAK,YACH,OAAOgB,EAAgBL,QAAU,EAC7B,GACAK,EAAgBS,MAAM,GAAI,GAEhC,QACE,MAAM,GAAN,mBAAWT,GAAX,CAA4BhB,WAMrCgB,EAAgBL,OAAS,GAAK,oCAAOS,EAAP,OAC/B,cAAC,EAAD,CAAab,OAAQa,UCpBdM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e257628f.chunk.js","sourcesContent":["const foneng = {\r\n  P: \"p\",\r\n  M: \"m\",\r\n  V: \"v\",\r\n  J: \"dʒ\",\r\n  // greek phi\r\n  φ: \"ʒ\",\r\n  // cyrillic hwe\r\n  ꚕ: \"ð\",\r\n  T: \"t\",\r\n  N: \"n\",\r\n  R: \"r\",\r\n  Z: \"z\",\r\n  K: \"k\",\r\n  // cyrillic be\r\n  Б: \"ɒ\",\r\n  // greek lambda\r\n  Λ: \"ʌ\",\r\n  // cyrillic che\r\n  Ч: \"a\",\r\n  // this one is most likely not the correct letter but close enough\r\n  e: \"ɛ\",\r\n  A: \"eɪ\",\r\n  // not perf but backwards s\r\n  Ƨ: \"ɪə\",\r\n  Ь: \"ɔɪ\",\r\n  O: \"əʊ\",\r\n  // georgian ghan\r\n  Ⴖ: \"ʊ\",\r\n  // hebrew nun - not close enough\r\n  נ: \"ʊə\",\r\n  U: \"u ː\",\r\n  B: \"b\",\r\n  F: \"f\",\r\n  W: \"w\",\r\n  X: \"tʃ\",\r\n  C: \"ʃ\",\r\n  // greek theta\r\n  ϴ: \"θ\",\r\n  D: \"d\",\r\n  L: \"l\",\r\n  S: \"s\",\r\n  Y: \"j\",\r\n  G: \"g\",\r\n  // Cyrillic e\r\n  Э: \"ɔ\",\r\n  // Latin schwa - partial differential would be another option\r\n  ә: \"əˈ\",\r\n  // Greek gamma\r\n  Γ: \"ɪ\",\r\n  I: \"ʌɪ\",\r\n  // Georgian vin\r\n  ვ: \"ɛː\",\r\n  E: \"iː\",\r\n  // this should be a reversed 2 symbol\r\n  ς: \"aʊ\",\r\n  // Greek reversed sigma\r\n  \"Ͻ \": \"ɔː\",\r\n  // Quincunx\r\n  \"⚻\": \"əː\",\r\n  // ocr chair\r\n  \"⑁\": \"ŋ\",\r\n  H: \"ˈh\",\r\n} as const;\r\n\r\nexport default foneng;\r\n","import { FC } from \"react\";\r\n\r\nexport type KeyboardPress<L extends string> =\r\n  | { letter: L; ipa: string }\r\n  | { letter: \"backspace\" };\r\n\r\ninterface Props<M extends Record<string, string>> {\r\n  langMap: M;\r\n  onPress: (ev: KeyboardPress<Extract<keyof M, string>>) => void;\r\n}\r\n\r\nconst KEY_SIZE = 40;\r\n\r\nexport const Keyboard = <M extends Record<string, string>>({\r\n  langMap,\r\n  onPress,\r\n}: Props<M>) => {\r\n  const langEntries = Object.entries(langMap) as [\r\n    Extract<keyof M, string>,\r\n    string\r\n  ][];\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        width: \"75%\",\r\n        flexWrap: \"wrap\",\r\n        maxWidth: KEY_SIZE * 14,\r\n      }}\r\n    >\r\n      {langEntries.map(([letter, ipa]) => (\r\n        <button\r\n          key={letter}\r\n          style={{\r\n            height: KEY_SIZE,\r\n            width: KEY_SIZE,\r\n            fontSize: \"1.5rem\",\r\n            margin: KEY_SIZE / 20,\r\n          }}\r\n          onClick={() => onPress({ letter, ipa })}\r\n        >\r\n          {letter}\r\n        </button>\r\n      ))}\r\n      <button\r\n        style={{\r\n          height: KEY_SIZE,\r\n          width: KEY_SIZE * 2 + (2 * KEY_SIZE) / 20,\r\n          margin: KEY_SIZE / 20,\r\n        }}\r\n        onClick={() => onPress({ letter: \"backspace\" })}\r\n      >\r\n        Bkspce\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport phonsByLen from \"../../langMaps/dictByPhonLen.json\";\r\n\r\ninterface Props {\r\n  search: string;\r\n}\r\n\r\nexport const SearchIPADB: FC<Props> = ({ search }) => {\r\n  console.log(phonsByLen[search.length]);\r\n  // @ts-ignore\r\n  const foundPhons: string[] = phonsByLen[search.length][search] || [];\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {foundPhons.map((word: string) => (\r\n          <li key={word}>{word}</li>\r\n        ))}\r\n      </ul>\r\n      {search.length && !foundPhons.length ? (\r\n        <span>No Words Found</span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport foneng from \"./langMaps/foneng\";\nimport { Keyboard } from \"./components/Keyboard/Keyboard\";\nimport { SearchIPADB } from \"./components/SearchIPADB/SearchIPADB\";\n\nfunction App() {\n  const [inputCharacters, setInputCharacters] = useState<\n    (keyof typeof foneng)[]\n  >([]);\n  const inputText = inputCharacters.join(\"\");\n  const inputIpa = inputCharacters.map((l) => foneng[l]).join(\"\");\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input style={{ fontSize: \"1.5rem\" }} readOnly value={inputText} />\n        <Keyboard\n          langMap={foneng}\n          onPress={({ letter }) =>\n            setInputCharacters((inputCharacters) => {\n              switch (letter) {\n                case \"backspace\":\n                  return inputCharacters.length <= 1\n                    ? []\n                    : inputCharacters.slice(0, -1);\n\n                default:\n                  return [...inputCharacters, letter];\n              }\n            })\n          }\n        />\n\n        {inputCharacters.length > 0 && <div>/{inputIpa}/</div>}\n        <SearchIPADB search={inputIpa} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}